package client

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// PostsPostsPost includes the requested fields of the GraphQL type Post.
type PostsPostsPost struct {
	// The unique identifier
	Id string `json:"id"`
	// Select a slug for this blog post, such as post-1, post-2, etc.
	Slug string `json:"slug"`
	// Name your blog post!
	Title       string `json:"title"`
	Description string `json:"description"`
	// User that last updated this document
	UpdatedBy PostsPostsPostUpdatedByUser `json:"updatedBy"`
	Content   string                      `json:"content"`
	// Upload or select a cover image to set as your Featured Image
	CoverImage PostsPostsPostCoverImageAsset `json:"coverImage"`
	// The time the document was created
	CreatedAt time.Time `json:"createdAt"`
	// The time the document was updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostsPostsPostCoverImageAsset includes the requested fields of the GraphQL type Asset.
// The GraphQL type's documentation follows.
//
// Asset system model
type PostsPostsPostCoverImageAsset struct {
	// The file handle
	Handle      string `json:"handle"`
	Attribution string `json:"attribution"`
}

// PostsPostsPostUpdatedByUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// User system model
type PostsPostsPostUpdatedByUser struct {
	// The username
	Name string `json:"name"`
}

// PostsResponse is returned by Posts on success.
type PostsResponse struct {
	// Retrieve multiple posts
	Posts []PostsPostsPost `json:"posts"`
}

func Posts(
	ctx context.Context,
	client graphql.Client,
) (*PostsResponse, error) {
	var err error

	var retval PostsResponse
	err = client.MakeRequest(
		ctx,
		"Posts",
		`
query Posts {
	posts {
		id
		slug
		title
		description
		updatedBy {
			name
		}
		content
		coverImage {
			handle
			attribution
		}
		createdAt
		updatedAt
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}
